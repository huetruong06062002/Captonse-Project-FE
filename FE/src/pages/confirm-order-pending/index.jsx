import { getRequestParams } from '@services/api';
import React, { useEffect, useRef, useState } from "react";
import OrderDetailDrawer from './OrderDetailDrawer';

function ConfirmOrderPending() {
  const [orders, setOrders] = useState([]); // Danh s√°ch ƒë∆°n h√†ng
  const [currentPage, setCurrentPage] = useState(1); // Trang hi·ªán t·∫°i
  const [pageSize, setPageSize] = useState(10); // S·ªë b·∫£n ghi tr√™n m·ªói trang
  const [totalRecords, setTotalRecords] = useState(0); // T·ªïng s·ªë b·∫£n ghi
  const [orderId, setOrderId] = useState(null); // ID ƒë∆°n h√†ng ƒë∆∞·ª£c ch·ªçn
  useEffect(() => {
    fetchPendingOrder();
  }, [currentPage, pageSize]); // G·ªçi l·∫°i khi currentPage ho·∫∑c pageSize thay ƒë·ªïi

  const fetchPendingOrder = async () => {
    try {
      const params = {
        page: currentPage,
        pageSize: pageSize,
      }
      const response = await  getRequestParams("/customer-staff/pending-orders", params)
      console.log("Response:", response); // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ API
      if (!response.data) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      setOrders(response.data.data); // L∆∞u danh s√°ch ƒë∆°n h√†ng v√†o state
      setTotalRecords(response.data.totalRecords); // L∆∞u t·ªïng s·ªë b·∫£n ghi ƒë·ªÉ ph√¢n trang
    } catch (error) {
      console.error("Error fetching pending orders:", error);
    }
  };

  const [dropdownVisible, setDropdownVisible] = useState(null); // Qu·∫£n l√Ω dropdown hi·ªÉn th·ªã
  const dropdownRef = useRef(null); // Tham chi·∫øu ƒë·∫øn dropdown

  const handleClickOutside = (event) => {
    if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
      setDropdownVisible(null); // ƒê√≥ng dropdown n·∫øu b·∫•m ra ngo√†i
    }
  };

  useEffect(() => {
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const toggleDropdown = (orderId) => {
    setDropdownVisible((prev) => (prev === orderId ? null : orderId));
  };

  const handleViewDetails = (orderId) => {
    setOrderId(orderId); // L∆∞u ID ƒë∆°n h√†ng ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt
    console.log("Xem chi ti·∫øt ƒë∆°n h√†ng:", orderId);
    showDrawer(); // M·ªü drawer ƒë·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng
    // Th√™m logic x·ª≠ l√Ω xem chi ti·∫øt ·ªü ƒë√¢y
  };

  const handleAcceptOrder = (orderId) => {
    console.log("Nh·∫≠n x·ª≠ l√Ω ƒë∆°n h√†ng:", orderId);
    // Th√™m logic x·ª≠ l√Ω nh·∫≠n ƒë∆°n h√†ng ·ªü ƒë√¢y
  };

  const handleUpdateOrder = (orderId) => {
    console.log("C·∫≠p nh·∫≠t ƒë∆°n h√†ng:", orderId);
    // Th√™m logic x·ª≠ l√Ω c·∫≠p nh·∫≠t ƒë∆°n h√†ng ·ªü ƒë√¢y
  };

  const [drawerVisible, setDrawerVisible] = useState(false);

  const showDrawer = () => {
    setDrawerVisible(true);
  };

  const onClose = () => {
    setDrawerVisible(false);
  };

  console.log(orderId, drawerVisible, orders); // Ki·ªÉm tra gi√° tr·ªã c·ªßa orderId v√† drawerVisible


  return (
    <div style={{ overflow: "hidden" }}>
      <div
        style={{
          overflowY: "auto", // Th√™m thanh cu·ªôn d·ªçc n·∫øu n·ªôi dung tr√†n
          maxHeight: "50rem", // Gi·ªõi h·∫°n chi·ªÅu cao t·ªëi ƒëa
        }}
      >
        <table
          style={{
            width: "100%",
            borderCollapse: "collapse",
            marginTop: "20px",
          }}
        >
          <thead>
            <tr>
              <th style={{ border: "1px solid #ddd", padding: "8px" }}>STT</th>
              <th style={{ border: "1px solid #ddd", padding: "8px" }}>
                T√™n ƒë∆°n h√†ng
              </th>
              <th style={{ border: "1px solid #ddd", padding: "8px" }}>
                T·ªïng gi√°
              </th>
              <th style={{ border: "1px solid #ddd", padding: "8px" }}>
                Tr·∫°ng th√°i
              </th>
              <th style={{ border: "1px solid #ddd", padding: "8px" }}>
                Ng√†y ƒë·∫∑t
              </th>
              <th style={{ border: "1px solid #ddd", padding: "8px" }}>
                H√†nh ƒë·ªông
              </th>
            </tr>
          </thead>
          <tbody>
            {orders.map((order, index) => (
              <tr key={order.orderId}>
                <td
                  style={{
                    border: "1px solid #ddd",
                    padding: "8px",
                    textAlign: "center",
                  }}
                >
                  {index + 1 + (currentPage - 1) * pageSize}
                </td>
                <td style={{ border: "1px solid #ddd", padding: "8px" }}>
                  {order.orderName}
                </td>
                <td style={{ border: "1px solid #ddd", padding: "8px" }}>
                  {order.totalPrice} VND
                </td>
                <td style={{ border: "1px solid #ddd", padding: "8px" }}>
                  {order.orderStatus}
                </td>
                <td style={{ border: "1px solid #ddd", padding: "8px" }}>
                  {new Date(order.orderedDate).toLocaleString("vi-VN")}
                </td>
                <td
                  style={{
                    border: "1px solid #ddd",
                    padding: "8px",
                    textAlign: "center",
                  }}
                >
                  <div
                    ref={dropdownRef} // Tham chi·∫øu ƒë·∫øn dropdown
                    style={{ position: "relative", display: "inline-block" }}
                    onMouseDown={(event) => event.stopPropagation()}
                  >
                    {/* Icon menu */}
                    <button
                      style={{
                        backgroundColor: "#f9f9f9",
                        border: "none",
                        cursor: "pointer",
                        fontSize: "1rem",
                        padding: "0 1rem",
                      }}
                      onClick={() => toggleDropdown(order.orderId)}
                    >
                      &#x22EE; {/* Icon menu (vertical ellipsis) */}
                    </button>

                    {/* Dropdown menu */}
                    {dropdownVisible === order.orderId && (
                      <div
                        style={{
                          position: "absolute",
                          top: "100%",
                          right: "0",
                          background: "#fff",
                          border: "1px solid #ddd",
                          borderRadius: "5px",
                          boxShadow: "0 2px 5px rgba(0, 0, 0, 0.2)",
                          zIndex: 1000,
                          width: "13rem",
                        }}
                      >
                        <button
                          style={{
                            display: "flex", // S·ª≠ d·ª•ng flex ƒë·ªÉ cƒÉn ch·ªânh icon v√† text
                            alignItems: "center", // CƒÉn gi·ªØa icon v√† text theo chi·ªÅu d·ªçc
                            width: "100%",
                            padding: "8px",
                            border: "none",
                            background: "none",
                            textAlign: "left",
                            cursor: "pointer",
                            color: "#007bff", // M√†u ch·ªØ
                            fontWeight: "bold", // Ch·ªØ ƒë·∫≠m
                            fontSize: "14px", // K√≠ch th∆∞·ªõc ch·ªØ
                          }}
                          onClick={() => handleViewDetails(order.orderId)}
                        >
                          <span style={{ marginRight: "8px" }}>üîç</span>{" "}
                          {/* Icon t√¨m ki·∫øm */}
                          <p> Xem chi ti·∫øt</p>
                        </button>
                        <button
                          style={{
                            display: "flex", // S·ª≠ d·ª•ng flex ƒë·ªÉ cƒÉn ch·ªânh icon v√† text
                            alignItems: "center", // CƒÉn gi·ªØa icon v√† text theo chi·ªÅu d·ªçc
                            width: "100%",
                            padding: "8px",
                            border: "none",
                            background: "none",
                            textAlign: "left",
                            cursor: "pointer",
                            color: "#28a745", // M√†u ch·ªØ xanh l√°
                            fontWeight: "bold", // Ch·ªØ ƒë·∫≠m
                            fontSize: "14px", // K√≠ch th∆∞·ªõc ch·ªØ
                          }}
                          onClick={() => handleAcceptOrder(order.orderId)}
                        >
                          <span style={{ marginRight: "8px" }}>‚úÖ</span>{" "}
                          {/* Icon check */}
                          Nh·∫≠n x·ª≠ l√Ω ƒë∆°n h√†ng
                        </button>
                        <button
                          style={{
                            display: "flex", // S·ª≠ d·ª•ng flex ƒë·ªÉ cƒÉn ch·ªânh icon v√† text
                            alignItems: "center", // CƒÉn gi·ªØa icon v√† text theo chi·ªÅu d·ªçc
                            width: "100%",
                            padding: "8px",
                            border: "none",
                            background: "none",
                            textAlign: "left",
                            cursor: "pointer",
                            color: "#ffc107", // M√†u ch·ªØ v√†ng
                            fontWeight: "bold", // Ch·ªØ ƒë·∫≠m
                            fontSize: "14px", // K√≠ch th∆∞·ªõc ch·ªØ
                          }}
                          onClick={() => handleUpdateOrder(order.orderId)}
                        >
                          <span style={{ marginRight: "8px" }}>‚úèÔ∏è</span>{" "}
                          {/* Icon ch·ªânh s·ª≠a */}
                          C·∫≠p nh·∫≠t
                        </button>
                      </div>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        <Pagination
          currentPage={currentPage}
          pageSize={pageSize}
          totalRecords={totalRecords}
          onPageChange={(page) => setCurrentPage(page)}
          onPageSizeChange={(size) => setPageSize(size)}
        />
          
      </div>
      <OrderDetailDrawer orderId={orderId} visible={drawerVisible} onClose={onClose} />
    </div>
  );
}

function Pagination({
  currentPage,
  pageSize,
  totalRecords,
  onPageChange,
  onPageSizeChange,
}) {
  const totalPages = Math.ceil(totalRecords / pageSize); // T√≠nh t·ªïng s·ªë trang

  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      onPageChange(page);
    }
  };

  return (
    <div
      style={{
        marginTop: "20px",
        textAlign: "center",
        maxHeight: "400px", // Gi·ªõi h·∫°n chi·ªÅu cao t·ªëi ƒëa
        overflowY: "auto", // Th√™m thanh cu·ªôn d·ªçc n·∫øu n·ªôi dung tr√†n
      }}
    >
      {/* N√∫t Previous */}
      <button
        onClick={() => handlePageChange(currentPage - 1)}
        disabled={currentPage === 1}
        style={{ marginRight: "10px", padding: "0.5rem 0.5rem" }}
      >
        Previous
      </button>

      {/* Danh s√°ch c√°c trang */}
      {Array.from({ length: totalPages }, (_, index) => index + 1).map(
        (page) => (
          <button
            key={page}
            onClick={() => handlePageChange(page)}
            style={{
              margin: "0 5px",
              padding: "5px 10px",
              backgroundColor: page === currentPage ? "#007bff" : "#fff",
              color: page === currentPage ? "#fff" : "#000",
              border: "1px solid #ddd",
              borderRadius: "5px",
              cursor: "pointer",
            }}
          >
            {page}
          </button>
        )
      )}

      {/* N√∫t Next */}
      <button
        onClick={() => handlePageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        style={{ marginRight: "10px", padding: "0.5rem 0.5rem" }}
      >
        Next
      </button>

      {/* Ch·ªçn s·ªë l∆∞·ª£ng b·∫£n ghi m·ªói trang */}
      <div style={{ marginTop: "10px" }}>
        <label>
          S·ªë l∆∞·ª£ng b·∫£n ghi m·ªói trang:
          <select
            value={pageSize}
            onChange={(e) => onPageSizeChange(Number(e.target.value))}
            style={{ marginLeft: "10px" }}
          >
            <option value={5}>5</option>
            <option value={10}>10</option>
            <option value={20}>20</option>
          </select>
        </label>
      </div>
    </div>
  );
}

export default ConfirmOrderPending;
